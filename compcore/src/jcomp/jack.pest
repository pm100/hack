class_file = _{ SOI ~ class ~ EOI }

class     = _{ "class" ~ class_name ~ "{" ~ class_var* ~ subroutine* ~ "}" }
class_var =  { field_type ~ type ~ identifier ~ ("," ~ identifier)* ~ ";" }

type            =  { "int" | "char" | "boolean" | class_name }
class_name      =  { identifier }
subroutine      =  { subroutine_type ~ (void | type) ~ subroutine_name ~ "(" ~ parameter_list ~ ")" ~ subroutine_body }
subroutine_name = _{ identifier }
subroutine_body = _{ "{" ~ variables ~ statements ~ "}" }
subroutine_type =  { ("constructor" | "function" | "method") }
parameter_list  =  { (parameter ~ ("," ~ parameter)*)? }
identifier      = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHA | ASCII_DIGIT | "_")* }
var_name        = _{ identifier }
var_dec         =  { "var" ~ type ~ var_name ~ ("," ~ var_name)* }
parameter       =  { type ~ var_name }
void            =  { "void" }

statements  =  { (statement)* }
variables   =  { (var_dec ~ ";")* }
statement   = _{ let_st | if_st | while_st | do_st | return_st }
let_st      =  { "let" ~ (array_var | var_name) ~ "=" ~ expression ~ ";" }
if_st       =  { "if" ~ "(" ~ expression ~ ")" ~ "{" ~ statements ~ "}" ~ ("else" ~ "{" ~ statements ~ "}")? }
while_st    =  { "while" ~ "(" ~ expression ~ ")" ~ "{" ~ statements ~ "}" }
do_st       =  { "do" ~ subroutine_call ~ ";" }
return_st   =  { "return" ~ expression? ~ ";" }
field_type  =  { "static" | "field" }
array_index =  { "[" ~ expression ~ "]" }
array_var   =  { var_name ~ array_index }

expression      =  { term ~ (op ~ term)* }
term            = _{ subroutine_call | int | string | keyword | (array_var | var_name) | "(" ~ expression ~ ")" | (unary_op ~ term) }
dotted_id       = @{ identifier ~ "." ~ identifier }
subroutine_call =  { (dotted_id | (subroutine_name)) ~ "(" ~ expression_list ~ ")" }
expression_list =  { (expression ~ ("," ~ expression)*)? }
op              =  { "+" | "-" | "*" | "/" | "<" | ">" | "=" | "&" | "|" }
unary_op        =  { "-" | "~" }
keyword         =  { "true" | "false" | "null" | "this" }
string          = ${ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
COMMENT         = _{ ("//" ~ (!"\n" ~ ANY)*) | ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }
int             =  { ("+" | "-")? ~ ASCII_DIGIT+ }
hex             =  { '0'..'9' | 'a'..'f' | 'A'..'F' }
hex_num         =  { "0X" | "0x" ~ hex+ }
WHITESPACE      = _{ " " | "\t" | "\n" | "\r" }
